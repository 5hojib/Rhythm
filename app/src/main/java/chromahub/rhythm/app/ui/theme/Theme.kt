package chromahub.rhythm.app.ui.theme

import android.app.Activity
import android.os.Build
import androidx.compose.foundation.isSystemInDarkTheme
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.darkColorScheme
import androidx.compose.material3.dynamicDarkColorScheme
import androidx.compose.material3.dynamicLightColorScheme
import androidx.compose.material3.lightColorScheme
import androidx.compose.runtime.Composable
import androidx.compose.runtime.SideEffect
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.graphics.toArgb
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.platform.LocalView
import androidx.core.view.WindowCompat

private val DarkColorScheme = darkColorScheme(
    primary = PrimaryDark,
    onPrimary = OnPrimaryDark,
    primaryContainer = PrimaryContainerDark,
    onPrimaryContainer = OnPrimaryContainerDark,
    secondary = SecondaryDark,
    onSecondary = OnSecondaryDark,
    secondaryContainer = SecondaryContainerDark,
    onSecondaryContainer = OnSecondaryContainerDark,
    tertiary = TertiaryDark,
    onTertiary = OnTertiaryDark,
    tertiaryContainer = TertiaryContainerDark,
    onTertiaryContainer = OnTertiaryContainerDark,
    error = ErrorDark,
    onError = OnErrorDark,
    errorContainer = ErrorContainerDark,
    onErrorContainer = OnErrorContainerDark,
    background = BackgroundDark,
    onBackground = OnBackgroundDark,
    surface = SurfaceDark,
    onSurface = OnSurfaceDark,
    surfaceVariant = SurfaceVariantDark,
    onSurfaceVariant = OnSurfaceVariantDark,
    outline = OutlineDark,
    outlineVariant = OutlineVariantDark,
    scrim = Color.Black,
    inverseSurface = InverseSurfaceDark,
    inverseOnSurface = InverseOnSurfaceDark,
    inversePrimary = InversePrimaryDark,
    surfaceDim = SurfaceContainerLowestDark,
    surfaceBright = SurfaceContainerHighestDark,
    surfaceContainerLowest = SurfaceContainerLowestDark,
    surfaceContainerLow = SurfaceContainerLowDark,
    surfaceContainer = SurfaceContainerDark,
    surfaceContainerHigh = SurfaceContainerHighDark,
    surfaceContainerHighest = SurfaceContainerHighestDark
)

private val LightColorScheme = lightColorScheme(
    primary = PrimaryLight,
    onPrimary = OnPrimaryLight,
    primaryContainer = PrimaryContainerLight,
    onPrimaryContainer = OnPrimaryContainerLight,
    secondary = SecondaryLight,
    onSecondary = OnSecondaryLight,
    secondaryContainer = SecondaryContainerLight,
    onSecondaryContainer = OnSecondaryContainerLight,
    tertiary = TertiaryLight,
    onTertiary = OnTertiaryLight,
    tertiaryContainer = TertiaryContainerLight,
    onTertiaryContainer = OnTertiaryContainerLight,
    error = ErrorLight,
    onError = OnErrorLight,
    errorContainer = ErrorContainerLight,
    onErrorContainer = OnErrorContainerLight,
    background = BackgroundLight,
    onBackground = OnBackgroundLight,
    surface = SurfaceLight,
    onSurface = OnSurfaceLight,
    surfaceVariant = SurfaceVariantLight,
    onSurfaceVariant = OnSurfaceVariantLight,
    outline = OutlineLight,
    outlineVariant = OutlineVariantLight,
    scrim = Color.Black,
    inverseSurface = InverseSurfaceLight,
    inverseOnSurface = InverseOnSurfaceLight,
    inversePrimary = InversePrimaryLight,
    surfaceDim = SurfaceContainerLowestLight,
    surfaceBright = SurfaceContainerHighestLight,
    surfaceContainerLowest = SurfaceContainerLowestLight,
    surfaceContainerLow = SurfaceContainerLowLight,
    surfaceContainer = SurfaceContainerLight,
    surfaceContainerHigh = SurfaceContainerHighLight,
    surfaceContainerHighest = SurfaceContainerHighestLight
)

/**
 * Get custom color scheme based on preset name
 */
fun getCustomColorScheme(schemeName: String, darkTheme: Boolean): androidx.compose.material3.ColorScheme {
    return when (schemeName) {
        "Warm" -> if (darkTheme) {
            darkColorScheme(
                primary = WarmPrimaryDark,
                onPrimary = WarmOnPrimaryDark,
                primaryContainer = WarmPrimaryContainerDark,
                onPrimaryContainer = WarmOnPrimaryContainerDark,
                secondary = WarmSecondaryDark,
                onSecondary = WarmOnSecondaryDark,
                secondaryContainer = WarmSecondaryContainerDark,
                onSecondaryContainer = WarmOnSecondaryContainerDark,
                tertiary = WarmTertiaryDark,
                onTertiary = WarmOnTertiaryDark,
                tertiaryContainer = WarmTertiaryContainerDark,
                onTertiaryContainer = WarmOnTertiaryContainerDark,
                error = ErrorDark,
                onError = OnErrorDark,
                errorContainer = ErrorContainerDark,
                onErrorContainer = OnErrorContainerDark,
                background = BackgroundDark,
                onBackground = OnBackgroundDark,
                surface = SurfaceDark,
                onSurface = OnSurfaceDark,
                surfaceVariant = SurfaceVariantDark,
                onSurfaceVariant = OnSurfaceVariantDark,
                outline = OutlineDark,
                outlineVariant = OutlineVariantDark,
                scrim = Color.Black,
                inverseSurface = InverseSurfaceDark,
                inverseOnSurface = InverseOnSurfaceDark,
                inversePrimary = InversePrimaryDark,
                surfaceDim = SurfaceContainerLowestDark,
                surfaceBright = SurfaceContainerHighestDark,
                surfaceContainerLowest = SurfaceContainerLowestDark,
                surfaceContainerLow = SurfaceContainerLowDark,
                surfaceContainer = SurfaceContainerDark,
                surfaceContainerHigh = SurfaceContainerHighDark,
                surfaceContainerHighest = SurfaceContainerHighestDark
            )
        } else {
            lightColorScheme(
                primary = WarmPrimaryLight,
                onPrimary = WarmOnPrimaryLight,
                primaryContainer = WarmPrimaryContainerLight,
                onPrimaryContainer = WarmOnPrimaryContainerLight,
                secondary = WarmSecondaryLight,
                onSecondary = WarmOnSecondaryLight,
                secondaryContainer = WarmSecondaryContainerLight,
                onSecondaryContainer = WarmOnSecondaryContainerLight,
                tertiary = WarmTertiaryLight,
                onTertiary = WarmOnTertiaryLight,
                tertiaryContainer = WarmTertiaryContainerLight,
                onTertiaryContainer = WarmOnTertiaryContainerLight,
                error = ErrorLight,
                onError = OnErrorLight,
                errorContainer = ErrorContainerLight,
                onErrorContainer = OnErrorContainerLight,
                background = BackgroundLight,
                onBackground = OnBackgroundLight,
                surface = SurfaceLight,
                onSurface = OnSurfaceLight,
                surfaceVariant = SurfaceVariantLight,
                onSurfaceVariant = OnSurfaceVariantLight,
                outline = OutlineLight,
                outlineVariant = OutlineVariantLight,
                scrim = Color.Black,
                inverseSurface = InverseSurfaceLight,
                inverseOnSurface = InverseOnSurfaceLight,
                inversePrimary = InversePrimaryLight,
                surfaceDim = SurfaceContainerLowestLight,
                surfaceBright = SurfaceContainerHighestLight,
                surfaceContainerLowest = SurfaceContainerLowestLight,
                surfaceContainerLow = SurfaceContainerLowLight,
                surfaceContainer = SurfaceContainerLight,
                surfaceContainerHigh = SurfaceContainerHighLight,
                surfaceContainerHighest = SurfaceContainerHighestLight
            )
        }
        "Cool" -> if (darkTheme) {
            darkColorScheme(
                primary = CoolPrimaryDark,
                onPrimary = CoolOnPrimaryDark,
                primaryContainer = CoolPrimaryContainerDark,
                onPrimaryContainer = CoolOnPrimaryContainerDark,
                secondary = CoolSecondaryDark,
                onSecondary = CoolOnSecondaryDark,
                secondaryContainer = CoolSecondaryContainerDark,
                onSecondaryContainer = CoolOnSecondaryContainerDark,
                tertiary = CoolTertiaryDark,
                onTertiary = CoolOnTertiaryDark,
                tertiaryContainer = CoolTertiaryContainerDark,
                onTertiaryContainer = CoolOnTertiaryContainerDark,
                error = ErrorDark,
                onError = OnErrorDark,
                errorContainer = ErrorContainerDark,
                onErrorContainer = OnErrorContainerDark,
                background = BackgroundDark,
                onBackground = OnBackgroundDark,
                surface = SurfaceDark,
                onSurface = OnSurfaceDark,
                surfaceVariant = SurfaceVariantDark,
                onSurfaceVariant = OnSurfaceVariantDark,
                outline = OutlineDark,
                outlineVariant = OutlineVariantDark,
                scrim = Color.Black,
                inverseSurface = InverseSurfaceDark,
                inverseOnSurface = InverseOnSurfaceDark,
                inversePrimary = InversePrimaryDark,
                surfaceDim = SurfaceContainerLowestDark,
                surfaceBright = SurfaceContainerHighestDark,
                surfaceContainerLowest = SurfaceContainerLowestDark,
                surfaceContainerLow = SurfaceContainerLowDark,
                surfaceContainer = SurfaceContainerDark,
                surfaceContainerHigh = SurfaceContainerHighDark,
                surfaceContainerHighest = SurfaceContainerHighestDark
            )
        } else {
            lightColorScheme(
                primary = CoolPrimaryLight,
                onPrimary = CoolOnPrimaryLight,
                primaryContainer = CoolPrimaryContainerLight,
                onPrimaryContainer = CoolOnPrimaryContainerLight,
                secondary = CoolSecondaryLight,
                onSecondary = CoolOnSecondaryLight,
                secondaryContainer = CoolSecondaryContainerLight,
                onSecondaryContainer = CoolOnSecondaryContainerLight,
                tertiary = CoolTertiaryLight,
                onTertiary = CoolOnTertiaryLight,
                tertiaryContainer = CoolTertiaryContainerLight,
                onTertiaryContainer = CoolOnTertiaryContainerLight,
                error = ErrorLight,
                onError = OnErrorLight,
                errorContainer = ErrorContainerLight,
                onErrorContainer = OnErrorContainerLight,
                background = BackgroundLight,
                onBackground = OnBackgroundLight,
                surface = SurfaceLight,
                onSurface = OnSurfaceLight,
                surfaceVariant = SurfaceVariantLight,
                onSurfaceVariant = OnSurfaceVariantLight,
                outline = OutlineLight,
                outlineVariant = OutlineVariantLight,
                scrim = Color.Black,
                inverseSurface = InverseSurfaceLight,
                inverseOnSurface = InverseOnSurfaceLight,
                inversePrimary = InversePrimaryLight,
                surfaceDim = SurfaceContainerLowestLight,
                surfaceBright = SurfaceContainerHighestLight,
                surfaceContainerLowest = SurfaceContainerLowestLight,
                surfaceContainerLow = SurfaceContainerLowLight,
                surfaceContainer = SurfaceContainerLight,
                surfaceContainerHigh = SurfaceContainerHighLight,
                surfaceContainerHighest = SurfaceContainerHighestLight
            )
        }
        "Forest" -> if (darkTheme) {
            darkColorScheme(
                primary = ForestPrimaryDark,
                onPrimary = ForestOnPrimaryDark,
                primaryContainer = ForestPrimaryContainerDark,
                onPrimaryContainer = ForestOnPrimaryContainerDark,
                secondary = ForestSecondaryDark,
                onSecondary = ForestOnSecondaryDark,
                secondaryContainer = ForestSecondaryContainerDark,
                onSecondaryContainer = ForestOnSecondaryContainerDark,
                tertiary = ForestTertiaryDark,
                onTertiary = ForestOnTertiaryDark,
                tertiaryContainer = ForestTertiaryContainerDark,
                onTertiaryContainer = ForestOnTertiaryContainerDark,
                error = ErrorDark,
                onError = OnErrorDark,
                errorContainer = ErrorContainerDark,
                onErrorContainer = OnErrorContainerDark,
                background = BackgroundDark,
                onBackground = OnBackgroundDark,
                surface = SurfaceDark,
                onSurface = OnSurfaceDark,
                surfaceVariant = SurfaceVariantDark,
                onSurfaceVariant = OnSurfaceVariantDark,
                outline = OutlineDark,
                outlineVariant = OutlineVariantDark,
                scrim = Color.Black,
                inverseSurface = InverseSurfaceDark,
                inverseOnSurface = InverseOnSurfaceDark,
                inversePrimary = InversePrimaryDark,
                surfaceDim = SurfaceContainerLowestDark,
                surfaceBright = SurfaceContainerHighestDark,
                surfaceContainerLowest = SurfaceContainerLowestDark,
                surfaceContainerLow = SurfaceContainerLowDark,
                surfaceContainer = SurfaceContainerDark,
                surfaceContainerHigh = SurfaceContainerHighDark,
                surfaceContainerHighest = SurfaceContainerHighestDark
            )
        } else {
            lightColorScheme(
                primary = ForestPrimaryLight,
                onPrimary = ForestOnPrimaryLight,
                primaryContainer = ForestPrimaryContainerLight,
                onPrimaryContainer = ForestOnPrimaryContainerLight,
                secondary = ForestSecondaryLight,
                onSecondary = ForestOnSecondaryLight,
                secondaryContainer = ForestSecondaryContainerLight,
                onSecondaryContainer = ForestOnSecondaryContainerLight,
                tertiary = ForestTertiaryLight,
                onTertiary = ForestOnTertiaryLight,
                tertiaryContainer = ForestTertiaryContainerLight,
                onTertiaryContainer = ForestOnTertiaryContainerLight,
                error = ErrorLight,
                onError = OnErrorLight,
                errorContainer = ErrorContainerLight,
                onErrorContainer = OnErrorContainerLight,
                background = BackgroundLight,
                onBackground = OnBackgroundLight,
                surface = SurfaceLight,
                onSurface = OnSurfaceLight,
                surfaceVariant = SurfaceVariantLight,
                onSurfaceVariant = OnSurfaceVariantLight,
                outline = OutlineLight,
                outlineVariant = OutlineVariantLight,
                scrim = Color.Black,
                inverseSurface = InverseSurfaceLight,
                inverseOnSurface = InverseOnSurfaceLight,
                inversePrimary = InversePrimaryLight,
                surfaceDim = SurfaceContainerLowestLight,
                surfaceBright = SurfaceContainerHighestLight,
                surfaceContainerLowest = SurfaceContainerLowestLight,
                surfaceContainerLow = SurfaceContainerLowLight,
                surfaceContainer = SurfaceContainerLight,
                surfaceContainerHigh = SurfaceContainerHighLight,
                surfaceContainerHighest = SurfaceContainerHighestLight
            )
        }
        "Rose" -> if (darkTheme) {
            darkColorScheme(
                primary = RosePrimaryDark,
                onPrimary = RoseOnPrimaryDark,
                primaryContainer = RosePrimaryContainerDark,
                onPrimaryContainer = RoseOnPrimaryContainerDark,
                secondary = RoseSecondaryDark,
                onSecondary = RoseOnSecondaryDark,
                secondaryContainer = RoseSecondaryContainerDark,
                onSecondaryContainer = RoseOnSecondaryContainerDark,
                tertiary = RoseTertiaryDark,
                onTertiary = RoseOnTertiaryDark,
                tertiaryContainer = RoseTertiaryContainerDark,
                onTertiaryContainer = RoseOnTertiaryContainerDark,
                error = ErrorDark,
                onError = OnErrorDark,
                errorContainer = ErrorContainerDark,
                onErrorContainer = OnErrorContainerDark,
                background = BackgroundDark,
                onBackground = OnBackgroundDark,
                surface = SurfaceDark,
                onSurface = OnSurfaceDark,
                surfaceVariant = SurfaceVariantDark,
                onSurfaceVariant = OnSurfaceVariantDark,
                outline = OutlineDark,
                outlineVariant = OutlineVariantDark,
                scrim = Color.Black,
                inverseSurface = InverseSurfaceDark,
                inverseOnSurface = InverseOnSurfaceDark,
                inversePrimary = InversePrimaryDark,
                surfaceDim = SurfaceContainerLowestDark,
                surfaceBright = SurfaceContainerHighestDark,
                surfaceContainerLowest = SurfaceContainerLowestDark,
                surfaceContainerLow = SurfaceContainerLowDark,
                surfaceContainer = SurfaceContainerDark,
                surfaceContainerHigh = SurfaceContainerHighDark,
                surfaceContainerHighest = SurfaceContainerHighestDark
            )
        } else {
            lightColorScheme(
                primary = RosePrimaryLight,
                onPrimary = RoseOnPrimaryLight,
                primaryContainer = RosePrimaryContainerLight,
                onPrimaryContainer = RoseOnPrimaryContainerLight,
                secondary = RoseSecondaryLight,
                onSecondary = RoseOnSecondaryLight,
                secondaryContainer = RoseSecondaryContainerLight,
                onSecondaryContainer = RoseOnSecondaryContainerLight,
                tertiary = RoseTertiaryLight2,
                onTertiary = RoseOnTertiaryLight,
                tertiaryContainer = RoseTertiaryContainerLight,
                onTertiaryContainer = RoseOnTertiaryContainerLight,
                error = ErrorLight,
                onError = OnErrorLight,
                errorContainer = ErrorContainerLight,
                onErrorContainer = OnErrorContainerLight,
                background = BackgroundLight,
                onBackground = OnBackgroundLight,
                surface = SurfaceLight,
                onSurface = OnSurfaceLight,
                surfaceVariant = SurfaceVariantLight,
                onSurfaceVariant = OnSurfaceVariantLight,
                outline = OutlineLight,
                outlineVariant = OutlineVariantLight,
                scrim = Color.Black,
                inverseSurface = InverseSurfaceLight,
                inverseOnSurface = InverseOnSurfaceLight,
                inversePrimary = InversePrimaryLight,
                surfaceDim = SurfaceContainerLowestLight,
                surfaceBright = SurfaceContainerHighestLight,
                surfaceContainerLowest = SurfaceContainerLowestLight,
                surfaceContainerLow = SurfaceContainerLowLight,
                surfaceContainer = SurfaceContainerLight,
                surfaceContainerHigh = SurfaceContainerHighLight,
                surfaceContainerHighest = SurfaceContainerHighestLight
            )
        }
        "Monochrome" -> if (darkTheme) {
            darkColorScheme(
                primary = MonoPrimaryDark,
                onPrimary = MonoOnPrimaryDark,
                primaryContainer = MonoPrimaryContainerDark,
                onPrimaryContainer = MonoOnPrimaryContainerDark,
                secondary = MonoSecondaryDark,
                onSecondary = MonoOnSecondaryDark,
                secondaryContainer = MonoSecondaryContainerDark,
                onSecondaryContainer = MonoOnSecondaryContainerDark,
                tertiary = MonoTertiaryDark,
                onTertiary = MonoOnTertiaryDark,
                tertiaryContainer = MonoTertiaryContainerDark,
                onTertiaryContainer = MonoOnTertiaryContainerDark,
                error = ErrorDark,
                onError = OnErrorDark,
                errorContainer = ErrorContainerDark,
                onErrorContainer = OnErrorContainerDark,
                background = BackgroundDark,
                onBackground = OnBackgroundDark,
                surface = SurfaceDark,
                onSurface = OnSurfaceDark,
                surfaceVariant = SurfaceVariantDark,
                onSurfaceVariant = OnSurfaceVariantDark,
                outline = OutlineDark,
                outlineVariant = OutlineVariantDark,
                scrim = Color.Black,
                inverseSurface = InverseSurfaceDark,
                inverseOnSurface = InverseOnSurfaceDark,
                inversePrimary = InversePrimaryDark,
                surfaceDim = SurfaceContainerLowestDark,
                surfaceBright = SurfaceContainerHighestDark,
                surfaceContainerLowest = SurfaceContainerLowestDark,
                surfaceContainerLow = SurfaceContainerLowDark,
                surfaceContainer = SurfaceContainerDark,
                surfaceContainerHigh = SurfaceContainerHighDark,
                surfaceContainerHighest = SurfaceContainerHighestDark
            )
        } else {
            lightColorScheme(
                primary = MonoPrimaryLight,
                onPrimary = MonoOnPrimaryLight,
                primaryContainer = MonoPrimaryContainerLight,
                onPrimaryContainer = MonoOnPrimaryContainerLight,
                secondary = MonoSecondaryLight,
                onSecondary = MonoOnSecondaryLight,
                secondaryContainer = MonoSecondaryContainerLight,
                onSecondaryContainer = MonoOnSecondaryContainerLight,
                tertiary = MonoTertiaryLight,
                onTertiary = MonoOnTertiaryLight,
                tertiaryContainer = MonoTertiaryContainerLight,
                onTertiaryContainer = MonoOnTertiaryContainerLight,
                error = ErrorLight,
                onError = OnErrorLight,
                errorContainer = ErrorContainerLight,
                onErrorContainer = OnErrorContainerLight,
                background = BackgroundLight,
                onBackground = OnBackgroundLight,
                surface = SurfaceLight,
                onSurface = OnSurfaceLight,
                surfaceVariant = SurfaceVariantLight,
                onSurfaceVariant = OnSurfaceVariantLight,
                outline = OutlineLight,
                outlineVariant = OutlineVariantLight,
                scrim = Color.Black,
                inverseSurface = InverseSurfaceLight,
                inverseOnSurface = InverseOnSurfaceLight,
                inversePrimary = InversePrimaryLight,
                surfaceDim = SurfaceContainerLowestLight,
                surfaceBright = SurfaceContainerHighestLight,
                surfaceContainerLowest = SurfaceContainerLowestLight,
                surfaceContainerLow = SurfaceContainerLowLight,
                surfaceContainer = SurfaceContainerLight,
                surfaceContainerHigh = SurfaceContainerHighLight,
                surfaceContainerHighest = SurfaceContainerHighestLight
            )
        }
        "Sunset" -> if (darkTheme) {
            darkColorScheme(
                primary = Color(0xFFFFB74D),
                onPrimary = Color(0xFF2E2416),
                primaryContainer = Color(0xFFFFD54F),
                onPrimaryContainer = Color(0xFF2E2416),
                secondary = Color(0xFFFF8A65),
                onSecondary = Color(0xFF2E2416),
                secondaryContainer = Color(0xFFFFCCBC),
                onSecondaryContainer = Color(0xFF442C18),
                tertiary = Color(0xFFFF7043),
                onTertiary = Color.White,
                tertiaryContainer = Color(0xFFFFAB91),
                onTertiaryContainer = Color(0xFF230F00),
                error = ErrorDark,
                onError = OnErrorDark,
                errorContainer = ErrorContainerDark,
                onErrorContainer = OnErrorContainerDark,
                background = BackgroundDark,
                onBackground = OnBackgroundDark,
                surface = SurfaceDark,
                onSurface = OnSurfaceDark,
                surfaceVariant = SurfaceVariantDark,
                onSurfaceVariant = OnSurfaceVariantDark,
                outline = OutlineDark,
                outlineVariant = OutlineVariantDark,
                scrim = Color.Black,
                inverseSurface = InverseSurfaceDark,
                inverseOnSurface = InverseOnSurfaceDark,
                inversePrimary = InversePrimaryDark,
                surfaceDim = SurfaceContainerLowestDark,
                surfaceBright = SurfaceContainerHighestDark,
                surfaceContainerLowest = SurfaceContainerLowestDark,
                surfaceContainerLow = SurfaceContainerLowDark,
                surfaceContainer = SurfaceContainerDark,
                surfaceContainerHigh = SurfaceContainerHighDark,
                surfaceContainerHighest = SurfaceContainerHighestDark
            )
        } else {
            lightColorScheme(
                primary = Color(0xFFFF6F00),
                onPrimary = Color.White,
                primaryContainer = Color(0xFFFFCC02),
                onPrimaryContainer = Color(0xFF2E2416),
                secondary = Color(0xFFFF5722),
                onSecondary = Color.White,
                secondaryContainer = Color(0xFFFFE0B2),
                onSecondaryContainer = Color(0xFF442C18),
                tertiary = Color(0xFFE65100),
                onTertiary = Color.White,
                tertiaryContainer = Color(0xFFFFCCBC),
                onTertiaryContainer = Color(0xFF230F00),
                error = ErrorLight,
                onError = OnErrorLight,
                errorContainer = ErrorContainerLight,
                onErrorContainer = OnErrorContainerLight,
                background = BackgroundLight,
                onBackground = OnBackgroundLight,
                surface = SurfaceLight,
                onSurface = OnSurfaceLight,
                surfaceVariant = SurfaceVariantLight,
                onSurfaceVariant = OnSurfaceVariantLight,
                outline = OutlineLight,
                outlineVariant = OutlineVariantLight,
                scrim = Color.Black,
                inverseSurface = InverseSurfaceLight,
                inverseOnSurface = InverseOnSurfaceLight,
                inversePrimary = InversePrimaryLight,
                surfaceDim = SurfaceContainerLowestLight,
                surfaceBright = SurfaceContainerHighestLight,
                surfaceContainerLowest = SurfaceContainerLowestLight,
                surfaceContainerLow = SurfaceContainerLowLight,
                surfaceContainer = SurfaceContainerLight,
                surfaceContainerHigh = SurfaceContainerHighLight,
                surfaceContainerHighest = SurfaceContainerHighestLight
            )
        }
        "Lavender" -> if (darkTheme) {
            darkColorScheme(
                primary = Color(0xFF9C7BFF),
                onPrimary = Color(0xFF2C1B69),
                primaryContainer = Color(0xFFC4B5FF),
                onPrimaryContainer = Color(0xFF23005C),
                secondary = Color(0xFFCEB3FF),
                onSecondary = Color(0xFF352B4B),
                secondaryContainer = Color(0xFFE0BBFF),
                onSecondaryContainer = Color(0xFF3F2A6C),
                tertiary = Color(0xFFE5B5FF),
                onTertiary = Color(0xFF44196A),
                tertiaryContainer = Color(0xFFFFD6FF),
                onTertiaryContainer = Color(0xFF52147A),
                error = ErrorDark,
                onError = OnErrorDark,
                errorContainer = ErrorContainerDark,
                onErrorContainer = OnErrorContainerDark,
                background = BackgroundDark,
                onBackground = OnBackgroundDark,
                surface = SurfaceDark,
                onSurface = OnSurfaceDark,
                surfaceVariant = SurfaceVariantDark,
                onSurfaceVariant = OnSurfaceVariantDark,
                outline = OutlineDark,
                outlineVariant = OutlineVariantDark,
                scrim = Color.Black,
                inverseSurface = InverseSurfaceDark,
                inverseOnSurface = InverseOnSurfaceDark,
                inversePrimary = InversePrimaryDark,
                surfaceDim = SurfaceContainerLowestDark,
                surfaceBright = SurfaceContainerHighestDark,
                surfaceContainerLowest = SurfaceContainerLowestDark,
                surfaceContainerLow = SurfaceContainerLowDark,
                surfaceContainer = SurfaceContainerDark,
                surfaceContainerHigh = SurfaceContainerHighDark,
                surfaceContainerHighest = SurfaceContainerHighestDark
            )
        } else {
            lightColorScheme(
                primary = Color(0xFF7C4DFF),
                onPrimary = Color.White,
                primaryContainer = Color(0xFFEAEAFF),
                onPrimaryContainer = Color(0xFF23005C),
                secondary = Color(0xFF9575CD),
                onSecondary = Color.White,
                secondaryContainer = Color(0xFFEDE7F3),
                onSecondaryContainer = Color(0xFF3F2A6C),
                tertiary = Color(0xFFBA68C8),
                onTertiary = Color.White,
                tertiaryContainer = Color(0xFFFFE4FF),
                onTertiaryContainer = Color(0xFF52147A),
                error = ErrorLight,
                onError = OnErrorLight,
                errorContainer = ErrorContainerLight,
                onErrorContainer = OnErrorContainerLight,
                background = BackgroundLight,
                onBackground = OnBackgroundLight,
                surface = SurfaceLight,
                onSurface = OnSurfaceLight,
                surfaceVariant = SurfaceVariantLight,
                onSurfaceVariant = OnSurfaceVariantLight,
                outline = OutlineLight,
                outlineVariant = OutlineVariantLight,
                scrim = Color.Black,
                inverseSurface = InverseSurfaceLight,
                inverseOnSurface = InverseOnSurfaceLight,
                inversePrimary = InversePrimaryLight,
                surfaceDim = SurfaceContainerLowestLight,
                surfaceBright = SurfaceContainerHighestLight,
                surfaceContainerLowest = SurfaceContainerLowestLight,
                surfaceContainerLow = SurfaceContainerLowLight,
                surfaceContainer = SurfaceContainerLight,
                surfaceContainerHigh = SurfaceContainerHighLight,
                surfaceContainerHighest = SurfaceContainerHighestLight
            )
        }
        "Mint" -> if (darkTheme) {
            darkColorScheme(
                primary = Color(0xFF4FC3F7),
                onPrimary = Color(0xFF0D3447),
                primaryContainer = Color(0xFF81D4FA),
                onPrimaryContainer = Color(0xFF001B2E),
                secondary = Color(0xFF4DD0E1),
                onSecondary = Color(0xFF00363C),
                secondaryContainer = Color(0xFF26C6DA),
                onSecondaryContainer = Color(0xFF0F3740),
                tertiary = Color(0xFF00BCD4),
                onTertiary = Color(0xFF00363C),
                tertiaryContainer = Color(0xFF4DD0E1),
                onTertiaryContainer = Color(0xFF00363C),
                error = ErrorDark,
                onError = OnErrorDark,
                errorContainer = ErrorContainerDark,
                onErrorContainer = OnErrorContainerDark,
                background = BackgroundDark,
                onBackground = OnBackgroundDark,
                surface = SurfaceDark,
                onSurface = OnSurfaceDark,
                surfaceVariant = SurfaceVariantDark,
                onSurfaceVariant = OnSurfaceVariantDark,
                outline = OutlineDark,
                outlineVariant = OutlineVariantDark,
                scrim = Color.Black,
                inverseSurface = InverseSurfaceDark,
                inverseOnSurface = InverseOnSurfaceDark,
                inversePrimary = InversePrimaryDark,
                surfaceDim = SurfaceContainerLowestDark,
                surfaceBright = SurfaceContainerHighestDark,
                surfaceContainerLowest = SurfaceContainerLowestDark,
                surfaceContainerLow = SurfaceContainerLowDark,
                surfaceContainer = SurfaceContainerDark,
                surfaceContainerHigh = SurfaceContainerHighDark,
                surfaceContainerHighest = SurfaceContainerHighestDark
            )
        } else {
            lightColorScheme(
                primary = Color(0xFF0097A7),
                onPrimary = Color.White,
                primaryContainer = Color(0xFFB2EBF2),
                onPrimaryContainer = Color(0xFF001B2E),
                secondary = Color(0xFF00ACC1),
                onSecondary = Color.White,
                secondaryContainer = Color(0xFFE0F2F1),
                onSecondaryContainer = Color(0xFF0F3740),
                tertiary = Color(0xFF00BCD4),
                onTertiary = Color.White,
                tertiaryContainer = Color(0xFFE1F5FE),
                onTertiaryContainer = Color(0xFF00363C),
                error = ErrorLight,
                onError = OnErrorLight,
                errorContainer = ErrorContainerLight,
                onErrorContainer = OnErrorContainerLight,
                background = BackgroundLight,
                onBackground = OnBackgroundLight,
                surface = SurfaceLight,
                onSurface = OnSurfaceLight,
                surfaceVariant = SurfaceVariantLight,
                onSurfaceVariant = OnSurfaceVariantLight,
                outline = OutlineLight,
                outlineVariant = OutlineVariantLight,
                scrim = Color.Black,
                inverseSurface = InverseSurfaceLight,
                inverseOnSurface = InverseOnSurfaceLight,
                inversePrimary = InversePrimaryLight,
                surfaceDim = SurfaceContainerLowestLight,
                surfaceBright = SurfaceContainerHighestLight,
                surfaceContainerLowest = SurfaceContainerLowestLight,
                surfaceContainerLow = SurfaceContainerLowLight,
                surfaceContainer = SurfaceContainerLight,
                surfaceContainerHigh = SurfaceContainerHighLight,
                surfaceContainerHighest = SurfaceContainerHighestLight
            )
        }
        else -> if (darkTheme) DarkColorScheme else LightColorScheme
    }
}

@Composable
fun RhythmTheme(
    darkTheme: Boolean = isSystemInDarkTheme(),
    // Dynamic color is available on Android 12+
    dynamicColor: Boolean = false, // Set to false to use our expressive theme
    customColorScheme: String = "Default",
    customFont: String = "System",
    content: @Composable () -> Unit
) {
    val colorScheme = when {
        dynamicColor && Build.VERSION.SDK_INT >= Build.VERSION_CODES.S -> {
            val context = LocalContext.current
            if (darkTheme) dynamicDarkColorScheme(context) else dynamicLightColorScheme(context)
        }
        customColorScheme != "Default" -> getCustomColorScheme(customColorScheme, darkTheme)
        darkTheme -> DarkColorScheme
        else -> LightColorScheme
    }
    
    val typography = getTypographyForFont(customFont)
    
    val view = LocalView.current
    if (!view.isInEditMode) {
        SideEffect {
            val window = (view.context as Activity).window
            
            // Enable edge-to-edge display
            WindowCompat.setDecorFitsSystemWindows(window, false)
            
            // Set system bar colors to transparent for true edge-to-edge
            window.setStatusBarColor(android.graphics.Color.TRANSPARENT)
            window.setNavigationBarColor(android.graphics.Color.TRANSPARENT)
            
            // Handle system bar appearance based on theme
            val insetsController = WindowCompat.getInsetsController(window, view)
            
            // Status bar icons/text color
            insetsController.isAppearanceLightStatusBars = !darkTheme
            
            // Navigation bar icons/buttons color
            insetsController.isAppearanceLightNavigationBars = !darkTheme
        }
    }

    MaterialTheme(
        colorScheme = colorScheme,
        typography = typography,
        shapes = Shapes,
        content = content
    )
}
